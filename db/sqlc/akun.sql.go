// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: akun.sql

package db

import (
	"context"
)

const addAkunBalance = `-- name: AddAkunBalance :one
UPDATE akun 
SET balance = balance + $1
WHERE id = $2
RETURNING id, owner, balance, currency, created_at
`

type AddAkunBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddAkunBalance(ctx context.Context, arg AddAkunBalanceParams) (Akun, error) {
	row := q.db.QueryRowContext(ctx, addAkunBalance, arg.Amount, arg.ID)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO akun (
  owner, 
  balance,
  currency
) VALUES (
  $1, $2, $3
) RETURNING id, owner, balance, currency, created_at
`

type CreateAuthorParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Akun, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Owner, arg.Balance, arg.Currency)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAkun = `-- name: DeleteAkun :exec
DELETE FROM akun 
WHERE id = $1
`

func (q *Queries) DeleteAkun(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAkun, id)
	return err
}

const getAkunForUpdate = `-- name: GetAkunForUpdate :one
SELECT id, owner, balance, currency, created_at FROM akun
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAkunForUpdate(ctx context.Context, id int64) (Akun, error) {
	row := q.db.QueryRowContext(ctx, getAkunForUpdate, id)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, owner, balance, currency, created_at FROM akun
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Akun, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, owner, balance, currency, created_at FROM akun
ORDER BY id 
LIMIT $1
OFFSET $2
`

type ListAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Akun, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Akun{}
	for rows.Next() {
		var i Akun
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAkun = `-- name: UpdateAkun :one
UPDATE akun 
SET balance = $2
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateAkunParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAkun(ctx context.Context, arg UpdateAkunParams) (Akun, error) {
	row := q.db.QueryRowContext(ctx, updateAkun, arg.ID, arg.Balance)
	var i Akun
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
